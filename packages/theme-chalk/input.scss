@import "./common/var.scss";
@import "./mixins/mixin.scss";

@include b(input) {
    // --el-input-height: var(--el-component-size);
    position: relative;
    font-size: 14px;
    display: inline-flex;
    width: 100%;
    line-height: 32px;
    box-sizing: border-box;
    vertical-align: middle;
    // @include scroll-bar;
  
    // & .#{$namespace}-input__clear,
    // & .#{$namespace}-input__password {
    //   color: getCssVar('input-icon-color');
    //   font-size: map.get($input-font-size, 'default');
    //   cursor: pointer;
  
    //   &:hover {
    //     color: getCssVar('input-clear-hover-color');
    //   }
    // }
  
    // & .#{$namespace}-input__count {
    //   height: 100%;
    //   display: inline-flex;
    //   align-items: center;
    //   color: getCssVar('color-info');
    //   font-size: 12px;
  
    //   .#{$namespace}-input__count-inner {
    //     background: getCssVar('fill-color', 'blank');
    //     line-height: initial;
    //     display: inline-block;
    //     padding-left: 8px;
    //   }
    // }
  
    // @include e(wrapper) {
    //   display: inline-flex;
    //   flex-grow: 1;
    //   align-items: center;
    //   justify-content: center;
    //   padding: $border-width map.get($input-padding-horizontal, 'default')-$border-width;
    //   background-color: var(
    //     #{getCssVarName('input-bg-color')},
    //     map.get($input, 'bg-color')
    //   );
    //   background-image: none;
    //   border-radius: getCssVarWithDefault(
    //     'input-border-radius',
    //     map.get($input, 'border-radius')
    //   );
    //   transition: getCssVar('transition-box-shadow');
    //   transform: translate3d(0, 0, 0);
    //   @include inset-input-border(
    //     var(
    //       #{getCssVarName('input-border-color')},
    //       map.get($input, 'border-color')
    //     )
    //   );
  
    //   &:hover {
    //     @include inset-input-border(#{getCssVar('input', 'hover-border-color')});
    //   }
  
    //   @include when(focus) {
    //     @include inset-input-border(#{getCssVar('input', 'focus-border-color')});
    //   }
    // }
  
    // @include e(inner) {
    //   // use map.get as default value for date picker range
    //   @include set-css-var-value(
    //     'input-inner-height',
    //     calc(
    //       var(
    //           #{getCssVarName('input-height')},
    //           #{map.get($input-height, 'default')}
    //         ) - $border-width * 2
    //     )
    //   );
  
    //   width: 100%;
    //   flex-grow: 1;
    //   -webkit-appearance: none;
    //   color: var(
    //     #{getCssVarName('input-text-color')},
    //     map.get($input, 'text-color')
    //   );
    //   font-size: inherit;
    //   height: getCssVar('input-inner-height');
    //   line-height: getCssVar('input-inner-height');
    //   padding: 0;
    //   outline: none;
    //   border: none;
    //   background: none;
    //   box-sizing: border-box;
  
    //   &:focus {
    //     outline: none;
    //   }
  
      &::placeholder {
        color:#ccc;
      }
  
    //   // override edge default style
    //   &[type='password']::-ms-reveal {
    //     display: none;
    //   }
    // }
  
    // @each $slot in (prefix, suffix) {
    //   @include e($slot) {
    //     display: inline-flex;
    //     white-space: nowrap;
    //     flex-shrink: 0;
    //     flex-wrap: nowrap;
    //     height: 100%;
    //     text-align: center;
    //     color: var(
    //       #{getCssVarName('input-icon-color')},
    //       map.get($input, 'icon-color')
    //     );
    //     transition: all getCssVar('transition-duration');
    //     pointer-events: none;
    //   }
  
    //   @include e(#{$slot}-inner) {
    //     pointer-events: all;
    //     display: inline-flex;
    //     align-items: center;
    //     justify-content: center;
  
    //     @if $slot == prefix {
    //       > :last-child {
    //         margin-right: 8px;
    //       }
  
    //       > :first-child {
    //         &,
    //         &.#{$namespace}-input__icon {
    //           margin-left: 0;
    //         }
    //       }
    //     } @else {
    //       > :first-child {
    //         margin-left: 8px;
    //       }
    //     }
    //   }
    // }
  
    // & .#{$namespace}-input__icon {
    //   height: inherit;
    //   line-height: inherit;
    //   display: flex;
    //   justify-content: center;
    //   align-items: center;
    //   transition: all getCssVar('transition-duration');
    //   margin-left: 8px;
    // }
  
    // @include e(validateIcon) {
    //   pointer-events: none;
    // }
  
    // @include when(active) {
    //   .#{$namespace}-input__wrapper {
    //     @include mixed-input-border(
    //       var(
    //         #{getCssVarName('input-focus-color')},
    //         map.get($input, 'focus-color')
    //       )
    //     );
    //   }
    // }
  
    // @include when(disabled) {
    //   cursor: not-allowed;
  
    //   .#{$namespace}-input__wrapper {
    //     background-color: map.get($input-disabled, 'fill');
    //     @include mixed-input-border(map.get($input-disabled, 'border'));
    //   }
  
    //   .#{$namespace}-input__inner {
    //     color: map.get($input-disabled, 'text-color');
    //     -webkit-text-fill-color: map.get($input-disabled, 'text-color');
    //     cursor: not-allowed;
  
    //     &::placeholder {
    //       color: map.get($input-disabled, 'placeholder-color');
    //     }
    //   }
  
    //   .#{$namespace}-input__icon {
    //     cursor: not-allowed;
    //   }
    // }
  
    // @include when(exceed) {
    //   .#{$namespace}-input__wrapper {
    //     @include mixed-input-border(#{getCssVar('color-danger')});
    //   }
  
    //   .#{$namespace}-input__suffix {
    //     .#{$namespace}-input__count {
    //       color: getCssVar('color-danger');
    //     }
    //   }
    // }
  
    // @each $size in (large, small) {
    //   @include m($size) {
    //     @include css-var-from-global('input-height', ('component-size', $size));
  
    //     font-size: map.get($input-font-size, $size);
  
    //     @include e(wrapper) {
    //       padding: $border-width map.get($input-padding-horizontal, $size)-$border-width;
    //     }
  
    //     @include e(inner) {
    //       @include set-css-var-value(
    //         'input-inner-height',
    //         calc(
    //           var(
    //               #{getCssVarName('input-height')},
    //               #{map.get($input-height, $size)}
    //             ) - $border-width * 2
    //         )
    //       );
    //     }
    //   }
    // }
  }